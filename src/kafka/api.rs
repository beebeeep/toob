#[derive(Debug)]
pub enum Request {
    Invalid = -1,
    Produce = 0,
    Fetch = 1,
    ListOffsets = 2,
    Metadata = 3,
    LeaderAndIsr = 4,
    StopReplica = 5,
    UpdateMetadata = 6,
    ControlledShutdown = 7,
    OffsetCommit = 8,
    OffsetFetch = 9,
    FindCoordinator = 10,
    JoinGroup = 11,
    Heartbeat = 12,
    LeaveGroup = 13,
    SyncGroup = 14,
    DescribeGroups = 15,
    ListGroups = 16,
    SaslHandshake = 17,
    ApiVersions = 18,
    CreateTopics = 19,
    DeleteTopics = 20,
    DeleteRecords = 21,
    InitProducerId = 22,
    OffsetForLeaderEpoch = 23,
    AddPartitionsToTxn = 24,
    AddOffsetsToTxn = 25,
    EndTxn = 26,
    WriteTxnMarkers = 27,
    TxnOffsetCommit = 28,
    DescribeAcls = 29,
    CreateAcls = 30,
    DeleteAcls = 31,
    DescribeConfigs = 32,
    AlterConfigs = 33,
    AlterReplicaLogDirs = 34,
    DescribeLogDirs = 35,
    SaslAuthenticate = 36,
    CreatePartitions = 37,
    CreateDelegationToken = 38,
    RenewDelegationToken = 39,
    ExpireDelegationToken = 40,
    DescribeDelegationToken = 41,
    DeleteGroups = 42,
    ElectLeaders = 43,
    IncrementalAlterConfigs = 44,
    AlterPartitionReassignments = 45,
    ListPartitionReassignments = 46,
    OffsetDelete = 47,
    DescribeClientQuotas = 48,
    AlterClientQuotas = 49,
    DescribeUserScramCredentials = 50,
    AlterUserScramCredentials = 54,
    DescribeQuorum = 56,
    UpdateFeatures = 59,
    DescribeCluster = 60,
    DescribeProducers = 63,
    UnregisterBroker = 64,
    DescribeTransactions = 65,
    ListTransactions = 66,
    AllocateProducerIds = 67,
    ConsumerGroupHeartbeat = 68,
    ConsumerGroupDescribe = 70,
    GetTelemetrySubscriptions = 71,
    PushTelemetry = 72,
    ListClientMetricsResources = 74,
    DescribeTopicPartitions = 75,
    AddRaftVoter = 80,
    RemoveRaftVoter = 81,
}
impl From<i16> for Request {
    fn from(value: i16) -> Self {
        match value {
            0 => Request::Produce,
            1 => Request::Fetch,
            2 => Request::ListOffsets,
            3 => Request::Metadata,
            4 => Request::LeaderAndIsr,
            5 => Request::StopReplica,
            6 => Request::UpdateMetadata,
            7 => Request::ControlledShutdown,
            8 => Request::OffsetCommit,
            9 => Request::OffsetFetch,
            10 => Request::FindCoordinator,
            11 => Request::JoinGroup,
            12 => Request::Heartbeat,
            13 => Request::LeaveGroup,
            14 => Request::SyncGroup,
            15 => Request::DescribeGroups,
            16 => Request::ListGroups,
            17 => Request::SaslHandshake,
            18 => Request::ApiVersions,
            19 => Request::CreateTopics,
            20 => Request::DeleteTopics,
            21 => Request::DeleteRecords,
            22 => Request::InitProducerId,
            23 => Request::OffsetForLeaderEpoch,
            24 => Request::AddPartitionsToTxn,
            25 => Request::AddOffsetsToTxn,
            26 => Request::EndTxn,
            27 => Request::WriteTxnMarkers,
            28 => Request::TxnOffsetCommit,
            29 => Request::DescribeAcls,
            30 => Request::CreateAcls,
            31 => Request::DeleteAcls,
            32 => Request::DescribeConfigs,
            33 => Request::AlterConfigs,
            34 => Request::AlterReplicaLogDirs,
            35 => Request::DescribeLogDirs,
            36 => Request::SaslAuthenticate,
            37 => Request::CreatePartitions,
            38 => Request::CreateDelegationToken,
            39 => Request::RenewDelegationToken,
            40 => Request::ExpireDelegationToken,
            41 => Request::DescribeDelegationToken,
            42 => Request::DeleteGroups,
            43 => Request::ElectLeaders,
            44 => Request::IncrementalAlterConfigs,
            45 => Request::AlterPartitionReassignments,
            46 => Request::ListPartitionReassignments,
            47 => Request::OffsetDelete,
            48 => Request::DescribeClientQuotas,
            49 => Request::AlterClientQuotas,
            50 => Request::DescribeUserScramCredentials,
            51 => Request::AlterUserScramCredentials,
            55 => Request::DescribeQuorum,
            57 => Request::UpdateFeatures,
            60 => Request::DescribeCluster,
            61 => Request::DescribeProducers,
            64 => Request::UnregisterBroker,
            65 => Request::DescribeTransactions,
            66 => Request::ListTransactions,
            67 => Request::AllocateProducerIds,
            68 => Request::ConsumerGroupHeartbeat,
            69 => Request::ConsumerGroupDescribe,
            71 => Request::GetTelemetrySubscriptions,
            72 => Request::PushTelemetry,
            74 => Request::ListClientMetricsResources,
            75 => Request::DescribeTopicPartitions,
            80 => Request::AddRaftVoter,
            81 => Request::RemoveRaftVoter,
            _ => Request::Invalid,
        }
    }
}

impl Into<i16> for Request {
    fn into(self) -> i16 {
        self as i16
    }
}

pub enum Error {
    UnknownServerError = -1,
    None = 0,
    OffsetOutOfRange = 1,
    CorruptMessage = 2,
    UnknownTopicOrPartition = 3,
    InvalidFetchSize = 4,
    LeaderNotAvailable = 5,
    NotLeaderOrFollower = 6,
    RequestTimedOut = 7,
    BrokerNotAvailable = 8,
    ReplicaNotAvailable = 9,
    MessageTooLarge = 10,
    StaleControllerEpoch = 11,
    OffsetMetadataTooLarge = 12,
    NetworkException = 13,
    CoordinatorLoadInProgress = 14,
    CoordinatorNotAvailable = 15,
    NotCoordinator = 16,
    InvalidTopicException = 17,
    RecordListTooLarge = 18,
    NotEnoughReplicas = 19,
    NotEnoughReplicasAfterAppend = 20,
    InvalidRequiredAcks = 21,
    IllegalGeneration = 22,
    InconsistentGroupProtocol = 23,
    InvalidGroupId = 24,
    UnknownMemberId = 25,
    InvalidSessionTimeout = 26,
    RebalanceInProgress = 27,
    InvalidCommitOffsetSize = 28,
    TopicAuthorizationFailed = 29,
    GroupAuthorizationFailed = 30,
    ClusterAuthorizationFailed = 31,
    InvalidTimestamp = 32,
    UnsupportedSaslMechanism = 33,
    IllegalSaslState = 34,
    UnsupportedVersion = 35,
    TopicAlreadyExists = 36,
    InvalidPartitions = 37,
    InvalidReplicationFactor = 38,
    InvalidReplicaAssignment = 39,
    InvalidConfig = 40,
    NotController = 41,
    InvalidRequest = 42,
    UnsupportedForMessageFormat = 43,
    PolicyViolation = 44,
    OutOfOrderSequenceNumber = 45,
    DuplicateSequenceNumber = 46,
    InvalidProducerEpoch = 47,
    InvalidTxnState = 48,
    InvalidProducerIdMapping = 49,
    InvalidTransactionTimeout = 50,
    ConcurrentTransactions = 51,
    TransactionCoordinatorFenced = 52,
    TransactionalIdAuthorizationFailed = 53,
    SecurityDisabled = 54,
    OperationNotAttempted = 55,
    KafkaStorageError = 56,
    LogDirNotFound = 57,
    SaslAuthenticationFailed = 58,
    UnknownProducerId = 59,
    ReassignmentInProgress = 60,
    DelegationTokenAuthDisabled = 61,
    DelegationTokenNotFound = 62,
    DelegationTokenOwnerMismatch = 63,
    DelegationTokenRequestNotAllowed = 64,
    DelegationTokenAuthorizationFailed = 65,
    DelegationTokenExpired = 66,
    InvalidPrincipalType = 67,
    NonEmptyGroup = 68,
    GroupIdNotFound = 69,
    FetchSessionIdNotFound = 70,
    InvalidFetchSessionEpoch = 71,
    ListenerNotFound = 72,
    TopicDeletionDisabled = 73,
    FencedLeaderEpoch = 74,
    UnknownLeaderEpoch = 75,
    UnsupportedCompressionType = 76,
    StaleBrokerEpoch = 77,
    OffsetNotAvailable = 78,
    MemberIdRequired = 79,
    PreferredLeaderNotAvailable = 80,
    GroupMaxSizeReached = 81,
    FencedInstanceId = 82,
    EligibleLeadersNotAvailable = 83,
    ElectionNotNeeded = 84,
    NoReassignmentInProgress = 85,
    GroupSubscribedToTopic = 86,
    InvalidRecord = 87,
    UnstableOffsetCommit = 88,
    ThrottlingQuotaExceeded = 89,
    ProducerFenced = 90,
    ResourceNotFound = 91,
    DuplicateResource = 92,
    UnacceptableCredential = 93,
    InconsistentVoterSet = 94,
    InvalidUpdateVersion = 95,
    FeatureUpdateFailed = 96,
    PrincipalDeserializationFailure = 97,
    SnapshotNotFound = 98,
    PositionOutOfRange = 99,
    UnknownTopicId = 100,
    DuplicateBrokerRegistration = 101,
    BrokerIdNotRegistered = 102,
    InconsistentTopicId = 103,
    InconsistentClusterId = 104,
    TransactionalIdNotFound = 105,
    FetchSessionTopicIdError = 106,
    IneligibleReplica = 107,
    NewLeaderElected = 108,
    OffsetMovedToTieredStorage = 109,
    FencedMemberEpoch = 110,
    UnreleasedInstanceId = 111,
    UnsupportedAssignor = 112,
    StaleMemberEpoch = 113,
    MismatchedEndpointType = 114,
    UnsupportedEndpointType = 115,
    UnknownControllerId = 116,
    UnknownSubscriptionId = 117,
    TelemetryTooLarge = 118,
    InvalidRegistration = 119,
    TransactionAbortable = 120,
    InvalidRecordState = 121,
    ShareSessionNotFound = 122,
    InvalidShareSessionEpoch = 123,
    FencedStateEpoch = 124,
    InvalidVoterKey = 125,
    DuplicateVoter = 126,
    VoterNotFound = 127,
    InvalidRegularExpression = 128,
    RebootstrapRequired = 129,
}

impl From<i16> for Error {
    fn from(value: i16) -> Self {
        match value {
            0 => Error::None,
            1 => Error::OffsetOutOfRange,
            2 => Error::CorruptMessage,
            3 => Error::UnknownTopicOrPartition,
            4 => Error::InvalidFetchSize,
            5 => Error::LeaderNotAvailable,
            6 => Error::NotLeaderOrFollower,
            7 => Error::RequestTimedOut,
            8 => Error::BrokerNotAvailable,
            9 => Error::ReplicaNotAvailable,
            10 => Error::MessageTooLarge,
            11 => Error::StaleControllerEpoch,
            12 => Error::OffsetMetadataTooLarge,
            13 => Error::NetworkException,
            14 => Error::CoordinatorLoadInProgress,
            15 => Error::CoordinatorNotAvailable,
            16 => Error::NotCoordinator,
            17 => Error::InvalidTopicException,
            18 => Error::RecordListTooLarge,
            19 => Error::NotEnoughReplicas,
            20 => Error::NotEnoughReplicasAfterAppend,
            21 => Error::InvalidRequiredAcks,
            22 => Error::IllegalGeneration,
            23 => Error::InconsistentGroupProtocol,
            24 => Error::InvalidGroupId,
            25 => Error::UnknownMemberId,
            26 => Error::InvalidSessionTimeout,
            27 => Error::RebalanceInProgress,
            28 => Error::InvalidCommitOffsetSize,
            29 => Error::TopicAuthorizationFailed,
            30 => Error::GroupAuthorizationFailed,
            31 => Error::ClusterAuthorizationFailed,
            32 => Error::InvalidTimestamp,
            33 => Error::UnsupportedSaslMechanism,
            34 => Error::IllegalSaslState,
            35 => Error::UnsupportedVersion,
            36 => Error::TopicAlreadyExists,
            37 => Error::InvalidPartitions,
            38 => Error::InvalidReplicationFactor,
            39 => Error::InvalidReplicaAssignment,
            40 => Error::InvalidConfig,
            41 => Error::NotController,
            42 => Error::InvalidRequest,
            43 => Error::UnsupportedForMessageFormat,
            44 => Error::PolicyViolation,
            45 => Error::OutOfOrderSequenceNumber,
            46 => Error::DuplicateSequenceNumber,
            47 => Error::InvalidProducerEpoch,
            48 => Error::InvalidTxnState,
            49 => Error::InvalidProducerIdMapping,
            50 => Error::InvalidTransactionTimeout,
            51 => Error::ConcurrentTransactions,
            52 => Error::TransactionCoordinatorFenced,
            53 => Error::TransactionalIdAuthorizationFailed,
            54 => Error::SecurityDisabled,
            55 => Error::OperationNotAttempted,
            56 => Error::KafkaStorageError,
            57 => Error::LogDirNotFound,
            58 => Error::SaslAuthenticationFailed,
            59 => Error::UnknownProducerId,
            60 => Error::ReassignmentInProgress,
            61 => Error::DelegationTokenAuthDisabled,
            62 => Error::DelegationTokenNotFound,
            63 => Error::DelegationTokenOwnerMismatch,
            64 => Error::DelegationTokenRequestNotAllowed,
            65 => Error::DelegationTokenAuthorizationFailed,
            66 => Error::DelegationTokenExpired,
            67 => Error::InvalidPrincipalType,
            68 => Error::NonEmptyGroup,
            69 => Error::GroupIdNotFound,
            70 => Error::FetchSessionIdNotFound,
            71 => Error::InvalidFetchSessionEpoch,
            72 => Error::ListenerNotFound,
            73 => Error::TopicDeletionDisabled,
            74 => Error::FencedLeaderEpoch,
            75 => Error::UnknownLeaderEpoch,
            76 => Error::UnsupportedCompressionType,
            77 => Error::StaleBrokerEpoch,
            78 => Error::OffsetNotAvailable,
            79 => Error::MemberIdRequired,
            80 => Error::PreferredLeaderNotAvailable,
            81 => Error::GroupMaxSizeReached,
            82 => Error::FencedInstanceId,
            83 => Error::EligibleLeadersNotAvailable,
            84 => Error::ElectionNotNeeded,
            85 => Error::NoReassignmentInProgress,
            86 => Error::GroupSubscribedToTopic,
            87 => Error::InvalidRecord,
            88 => Error::UnstableOffsetCommit,
            89 => Error::ThrottlingQuotaExceeded,
            90 => Error::ProducerFenced,
            91 => Error::ResourceNotFound,
            92 => Error::DuplicateResource,
            93 => Error::UnacceptableCredential,
            94 => Error::InconsistentVoterSet,
            95 => Error::InvalidUpdateVersion,
            96 => Error::FeatureUpdateFailed,
            97 => Error::PrincipalDeserializationFailure,
            98 => Error::SnapshotNotFound,
            99 => Error::PositionOutOfRange,
            100 => Error::UnknownTopicId,
            101 => Error::DuplicateBrokerRegistration,
            102 => Error::BrokerIdNotRegistered,
            103 => Error::InconsistentTopicId,
            104 => Error::InconsistentClusterId,
            105 => Error::TransactionalIdNotFound,
            106 => Error::FetchSessionTopicIdError,
            107 => Error::IneligibleReplica,
            108 => Error::NewLeaderElected,
            109 => Error::OffsetMovedToTieredStorage,
            110 => Error::FencedMemberEpoch,
            111 => Error::UnreleasedInstanceId,
            112 => Error::UnsupportedAssignor,
            113 => Error::StaleMemberEpoch,
            114 => Error::MismatchedEndpointType,
            115 => Error::UnsupportedEndpointType,
            116 => Error::UnknownControllerId,
            117 => Error::UnknownSubscriptionId,
            118 => Error::TelemetryTooLarge,
            119 => Error::InvalidRegistration,
            120 => Error::TransactionAbortable,
            121 => Error::InvalidRecordState,
            122 => Error::ShareSessionNotFound,
            123 => Error::InvalidShareSessionEpoch,
            124 => Error::FencedStateEpoch,
            125 => Error::InvalidVoterKey,
            126 => Error::DuplicateVoter,
            127 => Error::VoterNotFound,
            128 => Error::InvalidRegularExpression,
            129 => Error::RebootstrapRequired,
            _ => Error::UnknownServerError,
        }
    }
}

impl Into<i16> for Error {
    fn into(self) -> i16 {
        self as i16
    }
}
