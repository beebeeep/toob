syntax = "proto3";
import "google/protobuf/timestamp.proto";

package toob.protocol;

enum Request {
  Noop = 0;
  Produce = 1;
  Consume = 2;
  Metadata = 3;
}

enum ErrorCode {
  None = 0;
  InvalidRequest = 1;
  TopicPartitionNotFound = 2;
  ProduceError = 3;
  FetchError = 4;
  GenericError = 5;
}

message Message {
  google.protobuf.Timestamp timestamp = 1;
  bytes value = 2;
  optional bytes key = 3;
  map<string, bytes> metadata = 4;
}
  
// RequestHeader is sent before each request and identifies its type
message RequestHeader {
  Request request_id = 1;
  bytes request = 2; // nested protobuf message containing the specific API request
}

// ResponseHeader is always sent from server in response to RequestHeader
// (not necessarily right after request, depends on specific request)
message ResponseHeader {
  ErrorCode error = 1;
  optional string error_description = 2;
  optional bytes response = 3; //nested protobuf message containing the specific API response
}


// == Producing ==
// 1. client starts with RequestHeader containing ProduceRequest:
message ProduceRequest {
  string topic = 1;
  uint32 partition = 2;
  uint32 batch_size = 3;
}

// 2. client now sends messages, as length-delimited Message protobufs, total BatchSize messages

// 3. Once server read BatchSize messages, it replies with ResponseHeader with ProduceResponse:
message ProduceResponse {
  uint64 first_offset = 1; // offset of first message in the batch
}

// == Consuming ==
// 1. client starts with RequestsHeader containing ConsumeRequest:
message ConsumeRequest {
  string topic = 1;
  uint32 partition = 2;
  uint64 start_offset = 3;
  optional uint64 max_messages = 4;
}

// 2. server replies with ResponseHeader containing ConsumeResponse:
message ConsumeResponse {
  uint64 first_offset = 1;  // offset of first message in the batch (may differ from start_offset because of retention)
}

// 3. Server now streams messages, up to MaxMessages, or infinitely if MaxMessages is not specified


// == Metadata ==
// 1. client sends RequestHeader containining MetadataRequest:
message MetadataRequest {
  string topic = 1;
}

// 2. server replies with RequestResponse containing MetadataResponse:
message MetadataResponse {
  uint32 partitions = 1; // numer of partitions
}
